services:
  # n8n service for workflow automation
  n8n:
    image: n8nio/n8n
    container_name: n8n
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - VUE_APP_URL_BASE_API=http://localhost:5678
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=htmlparser2,domutils
    ports:
      - 5678:5678
    volumes:
      - n8n_data:/home/node
      - ./n8n/workflows:/workflows
    depends_on:
      - mongodb
      - ollama
    networks:
      - ai_net
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://n8n:5678/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama service for running AI models
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_MODELS=/models
    ports:
      - 11434:11434
    volumes:
      - ollama_data:/root/.ollama
      - ollama_models:/models
    networks:
      - ai_net
    restart: always
    entrypoint: ["/bin/bash", "-c", "ollama serve & sleep 5 && ollama pull mistral-nemo:latest && wait"]
    healthcheck:
      test: ["CMD-SHELL", "ollama list | grep -q mistral || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # MongoDB service for data storage
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - 59117:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
      - MONGO_INITDB_COLLECTION_NAME=${MONGO_DB_COLLECTION}
      - MONGO_NON_ROOT_USERNAME=${MONGO_DB_NAME}
      - MONGO_NON_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
    volumes:
      - mongo_config:/data/configdb
      - mongo_data:/data/db
      - ./data/db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai_net
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js web job manager
  nextjs:
    build:
      context: ./web-manager
      dockerfile: Dockerfile
    container_name: nextjs
    ports:
      - "3000:3000"
    environment: 
      - MONGODB_URI=mongodb://${MONGO_DB_NAME}:${MONGO_DB_PASSWORD}@mongodb:27017/${MONGO_DB_NAME}
    depends_on:
      - mongodb
      - vector_proxy
    networks:
      - ai_net

  # Grafana for logs visualization
  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    ports:
      - "5601:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://grafana:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Loki for logs aggregation
  loki:
    image: grafana/loki:3.5.1
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ai_net
    depends_on:
      - vector
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://loki:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector for logs processing
  vector:
    image: timberio/vector:0.38.0-alpine
    container_name: vector
    ports:
      - "8686:8686"
    volumes:
      - ./logs:/var/log/myapp:ro
      - ./config/vector.yaml:/etc/vector/vector.yaml:ro
    networks:
      - ai_net
    healthcheck:
      test: ["CMD-SHELL", "pidof vector || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Vector Reverse Proxy
  vector_proxy:
    image: nginx:latest
    container_name: vector_proxy
    ports:
      - "8687:8687"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - vector
    networks:
      - ai_net

  # Puppeteer service for web scraping
  puppeteer:
    build:
      context: ./http-request-operator
    container_name: puppeteer
    ports:
      - "3200:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - ai_net

volumes:
  n8n_data:
  ollama_data:
  ollama_models:
  mongo_data:
  mongo_config:
  grafana_data:

networks:
  ai_net:
    driver: bridge
