{
  "name": "France Travail Workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2500,
        620
      ],
      "id": "4cc05196-e8fa-4ef6-acbb-fc7d86d682c1",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "model": "mistral-nemo:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        620,
        680
      ],
      "id": "7a755cad-11a4-498a-8976-89eaf2587847",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "hUQ2PIddLcOWeePn",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2220,
        480
      ],
      "id": "ecf02eaf-8eba-4f73-9f51-8df60f6c93a7",
      "name": "Get Labels",
      "webhookId": "4082dee3-6eee-43fd-bafb-8c0286ca1b67",
      "credentials": {
        "gmailOAuth2": {
          "id": "9lTsmisJjlDGMYXq",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Liste des labels qu'on souhaite vérifier\nconst requiredLabels = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\n// Liste des labels déjà existants (récupérés de Gmail)\nconst existingLabels = items.map(item => item.json.name);\n\n// Labels manquants à créer\nconst missing = requiredLabels.filter(name => !existingLabels.includes(name));\n\n// On retourne un item par label à créer\nreturn missing.map(name => ({\n  json: {\n    name,\n    labelListVisibility: \"labelShow\",\n    messageListVisibility: \"show\"\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        580
      ],
      "id": "df116783-d2c1-4163-8faf-9b39dbee4f7e",
      "name": "MissingLabels",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "label",
        "operation": "create",
        "name": "={{ $json.name }}",
        "options": {
          "labelListVisibility": "labelShow",
          "messageListVisibility": "show"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1880,
        580
      ],
      "id": "cd0db98b-912a-4989-97e2-0c3e8b7c0312",
      "name": "Create Labels",
      "webhookId": "20805d82-3abc-44ed-ab69-29945ec7351b",
      "executeOnce": false,
      "credentials": {
        "gmailOAuth2": {
          "id": "9lTsmisJjlDGMYXq",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -1700,
        480
      ],
      "id": "4fd1965e-3274-44ba-b096-c9de968fa873",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const labels = items.map(item => item.json.name);\n\nconst required = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\nconst allPresent = required.every(r => labels.includes(r));\n\nif (allPresent) {\n  return [{ json: { ready: true } }];\n} else {\n  return [];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        480
      ],
      "id": "a0d237c6-ebae-4109-9cb8-c242bf6e4e56",
      "name": "CheckLabels"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7b35100d-dcaa-4f0e-81e5-cd7a787ba93d",
              "leftValue": "={{ $json.ready }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1320,
        480
      ],
      "id": "23b2ba4c-5d1d-462d-b9e5-fbdf7c8dab10",
      "name": "If Labels Ready",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "simple": false,
        "filters": {
          "sender": "service-candidat@francetravail.fr"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1080,
        480
      ],
      "id": "f90ecd3f-4bda-4f2c-9fb8-b4fddc83ee84",
      "name": "Get David Mails",
      "webhookId": "a78ec4c4-96ed-4cb4-98d9-278c5a562fd3",
      "credentials": {
        "gmailOAuth2": {
          "id": "9lTsmisJjlDGMYXq",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $json.id }}",
        "labelIds": [
          "Label_110"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        0,
        640
      ],
      "id": "994bbeb1-1a82-4506-a70d-10a0bf67fc33",
      "name": "Set Label to Emploi/Pole-Emploi",
      "webhookId": "e909a7e7-b389-4b89-b763-1df091ca6edf",
      "credentials": {
        "gmailOAuth2": {
          "id": "9lTsmisJjlDGMYXq",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Labels Check",
        "height": 400,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2280,
        380
      ],
      "id": "057f56ef-cbdc-4033-b872-fcca79a4523d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Get Mails",
        "height": 400,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        380
      ],
      "id": "88a7aa56-1c9b-49cc-8b50-0af30ee24855",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Switch",
        "height": 580,
        "width": 520
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -640,
        300
      ],
      "id": "5ea8983b-20ce-4516-a5fd-ad838aed7bfa",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "jobalerts-noreply@linkedin.com",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "08174c47-f7b7-4ee2-acb8-52f2638fe94b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "LinkedIn"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e4ffe735-ec03-4878-9038-0afb9ce35603",
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "service-candidat@francetravail.fr",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "FranceTravail"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fc448396-41e7-4cf3-9c0f-74685465e21b",
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "googlealerts-noreply@google.com",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "GoogleAlerts"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -600,
        480
      ],
      "id": "c2186dba-e598-4a7f-8580-5b2f3f08f2ef",
      "name": "Switch from Sender"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f54662fc-a378-4b56-9e3c-be341ef17b5a",
              "leftValue": "={{ $json.subject.toLowerCase() }}",
              "rightValue": "emploi",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -360,
        740
      ],
      "id": "fa05f810-c39d-406b-9c13-9dc4c27ff1c0",
      "name": "If Goocle Alerts for Job"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc04684b-256c-49da-a5fd-97f4ced2a422",
              "leftValue": "={{ $json.labelIds.includes(\"Label_107\") }}",
              "rightValue": "no-reply@twitch.tv",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "676cc4da-d457-4234-8f44-616b52c6a179",
              "leftValue": "={{ $json.labelIds.includes(\"Label_108\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "580a63d8-a896-480d-8fc0-f59f27ed9e82",
              "leftValue": "={{ $json.labelIds.includes(\"Label_109\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "91ff16f6-e8e0-415b-9a92-9d04d7c15b01",
              "leftValue": "={{ $json.labelIds.includes(\"Label_110\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -840,
        600
      ],
      "id": "1af832d7-c9bb-49e4-ad82-6b877e77b005",
      "name": "if not labeled",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Not Job Labeled",
        "height": 400,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        380
      ],
      "id": "440afd2c-4d1a-422e-833a-5427eddff21b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Pole Emploi Email Processing",
        "height": 440,
        "width": 1420
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        380
      ],
      "id": "850ccd7e-64ca-4d6c-87e9-dd5bf326ca1e",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "jobs",
        "fields": "title,date,company,location,teleworking,contract_type,salary,technologues,description,methodology,level,source,interest_indicator",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1140,
        480
      ],
      "id": "fc9e796f-a62a-4ef9-ac14-2b996e60ec19",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "IvgXVbITa4k6FOtz",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function getTitle(html) {\n  const m = html.match(/<span\\s+itemprop=\"title\">([^<]+)<\\/span>/);\n  return m ? m[1].trim() : null;\n}\n\nfunction getDate(html) {\n  const m = html.match(\n    /(?:Actualisé|Publié) le\\s+(\\d{1,2}\\s+[A-Za-zÀ-ÿ]+\\s+\\d{4})/i\n  );\n  return m && m[1] ? m[1] : null;\n}\n\nfunction toIsoDate(frDate) {\n  if (!frDate) return null;\n  // ex. \"07 mai 2025\"\n  const parts = frDate.split(' ');\n  const j = parts[0].padStart(2,'0');\n  const moisMap = {\n    janvier: '01', février: '02', mars: '03', avril: '04',\n    mai: '05', juin: '06', juillet: '07', août: '08',\n    septembre: '09', octobre: '10', novembre: '11', décembre: '12'\n  };\n  const m = moisMap[parts[1].toLowerCase()];\n  const a = parts[2];\n  return m ? `${a}-${m}-${j}` : null;\n}\n\nfunction getCompany(html) {\n  // 1) Schéma Organization\n  let m = html.match(\n    /<span\\s+itemtype=\"http:\\/\\/schema\\.org\\/Organization\"[\\s\\S]*?<span[^>]*itemprop=\"name\"[^>]*content=\"([^\"]+)\"/i\n  );\n  if (m && m[1]) return m[1].trim();\n\n  // 2) Section Employeur\n  m = html.match(\n    /<h2 class=\"t5 subtitle\">\\s*Employeur\\s*<\\/h2>[\\s\\S]*?<h3 class=\"t4 title\">\\s*([^<]+)\\s*<\\/h3>/i\n  );\n  if (m && m[1]) return m[1].trim();\n\n  return null;\n}\n\nfunction getLocation(html) {\n  const m = html.match(/<span\\s+class=\"location\">([^<]+)<\\/span>/);\n  return m ? m[1].trim() : null;\n}\n\nfunction getDescription(html) {\n  const m = html.match(\n    /<div\\s+itemprop=\"description\"[^>]*>([\\s\\S]*?)<\\/div>/\n  );\n  return m\n    ? m[1].replace(/<[^>]+>/g, '').trim()\n    : null;\n}\n\nfunction getJobId(html) {\n  const m = html.match(/Offre n°\\s*<span[^>]*>(\\d+)<\\/span>/);\n  return m ? m[1] : null;\n}\n\nconst response = []\nfor (const item of $input.all()) {\n  if (item.json.data) {\n    const html = item.json.data;\n    const title = getTitle(html)\n    const date = toIsoDate(getDate(html));\n    const company = getCompany(html);\n    const location = getLocation(html);\n    const description = getDescription(html);\n    const jobId = getJobId(html);\n    const source = jobId ? `https://candidat.francetravail.fr/offres/recherche/detail/${jobId}` : null;\n    response.push({ json: { title, date, company, location, description, source } });\n  }\n}\n\nreturn response;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        480
      ],
      "id": "b653cd0c-2cec-4007-94fe-efa98331bbf3",
      "name": "FranceTravail Job Data Extractor"
    },
    {
      "parameters": {
        "jsCode": "const response = []\n\nfor (const item of $input.all()) {\n  if (item.json.source) response.push(item)\n}\n\nreturn response;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        480
      ],
      "id": "8d9cf289-3947-48e2-bbe6-73053a346077",
      "name": "FranceTravail Job Checking"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let data = null\n\nconst rawOutput = $json.output;\n\n// Étape 1 : Extraire le bloc JSON (entre ```json ... ``` ou juste {...})\nconst match = rawOutput.match(/```json\\s*({[\\s\\S]+?})\\s*```/) || rawOutput.match(/{[\\s\\S]+}/);\nif (!match) {\n  console.log(Error(\"Aucun JSON détecté dans le champ 'output'\"));\n}\n\nlet jsonString = match ? match[1] || match[0] : \"\";\n\n// Étape 2 : Nettoyer les caractères échappés\n// Important : JSON.parse nécessite des doubles quotes correctes\ntry {\n  const clean = jsonString.replace(/\\\\\"/g, '\"'); // déséchapper les guillemets\n  data = JSON.parse(clean);\n} catch (e) {\n  console.log(e);\n}\n\nreturn { json: data };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        480
      ],
      "id": "2d7e531a-258c-4560-a2d3-e491d4a858ed",
      "name": "FranceTravail JSON Parser",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un assistant IA expert en analyse d’opportunités d’emploi tech.\n\nTu reçois ci-dessous une description d'offre d'emploi sous forme de contenu JSON. La description doit être résumée, concise, pertinente de mon point de vue de recherche d'emploi. Mets le focus sur les infos disponibles, pas sur ce qu'il manque.\n\nTa tâche est d'analyser ce contenu et de retourner uniquement un objet JSON conforme à la structure cible. Tu dois impérativement ignorer toute introduction, explication ou commentaire.\n\nContenu : \n{{ JSON.stringify($json, null, 2) }}\n\nRetour attendu :\n- uniquement un objet JSON\n- teleworking est un boolean à mettre à true si le télétravail est mentionné\n- pour salary: { \"min\": 0, \"max\": 0, \"currency\": \"EUR\" }, min et/ou max doivent être mis à jour si une ou plusieurs valeurs de salaire sont détectées avec les valeurs trouvées\n- pour description, mets-y un résumé concis de ce que propose l'offre d'emploi (contexte, environnement de travail, mission)\n- pour methodology, tu dois y mettre toutes les valeurs en lien avec les méthodes de gestion et de conception comme Agile, Waterfall, POO, Développement en couche, Design Pattern, etc.\n- pour level, il faut détecter si c'est un profil sénior, confirmé ou junior\n- pour source, c'est strictement la valeur {{ $json.source }}. Assure-toi de copier cette valeur exactement comme elle apparaît dans l'entrée.\n- pour interest_indicator, tu conserves uniquement l'émoji ✅ | 🟡 | ❌ qui correspond à l'offre\n- pour title, si {{ $json.title }} est null, essaie de trouver un titre adéquat.\nComme une API, réponds strictement conforme à cette structure :\n{\n  \"title\": \"{{ $json.title }}\",\n  \"date\": \"{{ $json.date }}\",\n  \"company\": \"{{ $json.company }}\",\n  \"location\": \"{{ $json.location }}\",\n  \"teleworking\": false,\n  \"contract_type\": \"string\",\n  \"salary\": {\n    \"min\": 0,\n    \"max\": 0,\n    \"currency\": \"EUR\"\n  },\n  \"technologies\": [\"string\"],\n  \"description\": \"string\",\n  \"methodology\": [\"string\"],\n  \"level\": \"string\",\n  \"source\": \"{{ $json.source }}\",\n  \"interest_indicator\": \"✅ A creuser\" | \"🟡 A vérifier\" | \"❌ A ignorer\"\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        640,
        480
      ],
      "id": "e3854a63-e5a8-429c-afe7-4a55614332df",
      "name": "AI Agent  for Pole Emploi"
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        480
      ],
      "id": "c6a8e096-6bd6-4bad-8d4d-5973329affec",
      "name": "FranceTravail HTTP Request",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const outputs = []; // Array to store parsed job offers\nlet finished = false; // Flag to stop parsing once general info is reached\n\nfor (const item of $input.all()) {\n  if (finished) break;\n\n  const htmlContent = item.json.textAsHtml || '';\n\n  // Split HTML content into blocks using sequences of '-' or '_'\n  // The <p> tags are optional\n  const offerBlocks = htmlContent\n    .split(/(?:<p>)?[-_]{3,}(?:<\\/p>)/gi)\n    .map(block => block.trim())\n    .filter(block => block.length > 0);\n\n  for (const block of offerBlocks) {\n    if (finished) break;\n\n    console.log({ block })\n\n    // Count the number of <p> tags in the block\n    const pCount = (block.match(/<p>/gi) || []).length;\n\n    // Process only blocks containing at least 3 <p> paragraphs\n    if (pCount > 2) {\n      let title = null;\n      let entreprise = null;\n      let departement = null;\n      let city = null;\n      let contract = null;\n      let fulltime = null;\n      let description = [];\n      let ref = null\n      let link = null\n\n      // Get ref from block\n      const refMatch = block.match(/num(?:é|e|&eacute;)ro\\s*(\\d+)/i);\n      if (refMatch) {\n        ref = refMatch[1];\n      }\n\n      if (ref) link = `https://candidat.francetravail.fr/offres/recherche/detail/${ref}`\n\n      // Extract each <p> content one by one\n      const regex = /<p>(.*?)<\\/p>/gi;\n      let match;\n      let i = 0;\n      while ((match = regex.exec(block)) !== null) {\n        if (finished) break;\n\n        const content = match[1].trim();\n\n        if (i === 0) {\n          // First paragraph → title\n          title = content;\n        } else if (i === 1) {\n          // Second paragraph → entreprise - departement - city\n          const parts = content.split('-');\n          if (parts.length >= 3) {\n            entreprise = parts[0].trim();\n            departement = parts[1].trim();\n            city = parts[2].trim();\n          } else {\n            entreprise = content;\n          }\n        } else if (i === 2) {\n          // Third paragraph → contract - fulltime\n          const parts = content.split('-');\n          if (parts.length >= 2) {\n            contract = parts[0].trim();\n            fulltime = parts[1].trim();\n          } else {\n            contract = content;\n          }\n        } else {\n          // From the fourth paragraph onwards → description\n          if (content.includes(\"rendez-vous sur le site\")) {\n            finished = true;\n          }\n          if (!finished) {\n            description.push(content);\n          }\n        }\n\n        i++;\n      }\n\n      // Save the parsed offer\n      outputs.push({\n        title,\n        entreprise,\n        departement,\n        city,\n        contract,\n        fulltime,\n        ref,\n        link,\n        description: description.join(' '), // Concatenate all description parts\n      });\n    }\n  }\n}\n\nreturn outputs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        480
      ],
      "id": "9b369882-4e47-4130-ac7a-2473c4dcc26f",
      "name": "FranceTravail Job Splitter"
    },
    {
      "parameters": {
        "path": "9da789a5-4890-461c-b6a1-19286c0b2102",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2500,
        480
      ],
      "id": "fee557c1-ec65-4fb6-9bd9-30ab22b033a1",
      "name": "Webhook",
      "webhookId": "9da789a5-4890-461c-b6a1-19286c0b2102"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent  for Pole Emploi",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MissingLabels": {
      "main": [
        [
          {
            "node": "Create Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "MissingLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "CheckLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckLabels": {
      "main": [
        [
          {
            "node": "If Labels Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Labels Ready": {
      "main": [
        [
          {
            "node": "Get David Mails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get David Mails": {
      "main": [
        [
          {
            "node": "if not labeled",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch from Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch from Sender": {
      "main": [
        [],
        [
          {
            "node": "FranceTravail Job Splitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Label to Emploi/Pole-Emploi",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Goocle Alerts for Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Goocle Alerts for Job": {
      "main": [
        []
      ]
    },
    "if not labeled": {
      "main": [
        [
          {
            "node": "Switch from Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FranceTravail Job Data Extractor": {
      "main": [
        [
          {
            "node": "FranceTravail Job Checking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FranceTravail Job Checking": {
      "main": [
        [
          {
            "node": "AI Agent  for Pole Emploi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent  for Pole Emploi": {
      "main": [
        [
          {
            "node": "FranceTravail JSON Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FranceTravail JSON Parser": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FranceTravail HTTP Request": {
      "main": [
        [
          {
            "node": "FranceTravail Job Data Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FranceTravail Job Splitter": {
      "main": [
        [
          {
            "node": "FranceTravail HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f0b842b7-fff2-4973-9824-63fce5e9bace",
  "meta": {
    "instanceId": "4ff0e1b13775c202a64e9cd1e2ef440689196f29dcdd64df5ce3643c9e0f0bb8"
  },
  "id": "4oyLsKPXUj8PChjg",
  "tags": []
}