{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "path": "enrich-enterprise",
        "options": {}
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "94ef81f3-98f1-49bf-8fe0-f29c92152674",
      "webhookId": "b949673f-f9b9-438c-a079-7893c8b6ee1f"
    },
    {
      "parameters": {
        "url": "https://api.pappers.fr/v2/entreprise",
        "options": {}
      },
      "name": "Requête API Pappers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        200,
        0
      ],
      "id": "c788c8fb-5754-4d55-b1ba-2bb3115f3e85"
    },
    {
      "parameters": {
        "url": "={{$json[\"wttj_url\"]}}",
        "responseFormat": "string",
        "options": {}
      },
      "name": "Scraping WTTJ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        400,
        0
      ],
      "id": "0cdb4db3-6df4-4df7-b8bb-da34ac8f06b3"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { html_content: $json[\"body\"] } }];"
      },
      "name": "Préparer contenu pour LLM",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        600,
        0
      ],
      "id": "62187838-b47f-41ec-b0bc-e5dbd7a527c4"
    },
    {
      "parameters": {
        "url": "http://localhost:11434/api/generate",
        "jsonParameters": true,
        "options": {}
      },
      "name": "Appel LLM (Ollama)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        800,
        0
      ],
      "id": "0b0b96da-a18a-41b2-a937-751af8194f00"
    },
    {
      "parameters": {
        "functionCode": "const pappersData = items[0].json;\nconst llmData = items[1].json;\n\nreturn [{\n  json: {\n    name: pappersData.nom_entreprise,\n    legal_form: pappersData.forme_juridique,\n    sector: pappersData.activite_principale,\n    revenues: [{\n      amount: pappersData.ca,\n      currency: \"EUR\",\n      year: pappersData.annee\n    }],\n    locations: [{\n      city: pappersData.ville,\n      country: \"France\",\n      is_headquarters: true,\n      effective: pappersData.effectif\n    }],\n    global_effective: pappersData.effectif,\n    products_services: llmData.products_services,\n    clients: llmData.clients,\n    market_positioning: llmData.market_positioning,\n    leadership: llmData.leadership,\n    culture: llmData.culture,\n    recruitment_context: llmData.recruitment_context,\n    communication: llmData.communication,\n    personal_alignment: llmData.personal_alignment,\n    notes: llmData.notes\n  }\n}];"
      },
      "name": "Fusionner données",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        0
      ],
      "id": "61b50ada-86c4-4d66-8e6a-ce6159af9e91"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "companies",
        "fields": [
          {
            "name": "document",
            "value": "={{$json}}"
          }
        ],
        "options": {}
      },
      "name": "Insertion MongoDB",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [
        1200,
        0
      ],
      "id": "ac7a0ef5-12f6-4cb7-814c-1f994c72c809",
      "credentials": {
        "mongoDb": {
          "id": null,
          "name": "MongoDB_Credentials"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -140,
        200
      ],
      "id": "9657d625-1a6e-40e5-a4a1-195b93318e7c",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "collection": "jobs",
        "options": {
          "limit": 1,
          "skip": "={{ $json.i }}"
        },
        "query": "={ \"$and\": [ { \"company_details.siren\": { \"$ne\" : null } }, {\"company_details.creation_date\": null} ] }"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        340,
        200
      ],
      "id": "ecb8b845-e529-4b84-b185-6fc09e85c098",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2541037b-c1b7-4705-a7bb-2f2d715e1315",
              "name": "i",
              "value": 0,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        200
      ],
      "id": "8d640d38-2085-4c02-a256-3c70fb019bc5",
      "name": "i = 0"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "470a468c-2003-44b5-87ac-b85f4b1145fb",
              "name": "i",
              "value": "={{ $json.i }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        200
      ],
      "id": "dcf0017b-d8d0-4697-af11-9e4e4c907b60",
      "name": "i"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d6da1929-cefa-4662-a95b-96a4ee623ada",
              "leftValue": "={{ $json.keys().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        580,
        200
      ],
      "id": "5c76006f-da50-4027-b364-169a885753e6",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b0a61a2-1b96-48e0-a788-b437da114b59",
              "name": "i",
              "value": "={{ parseInt($node[\"i\"].json['i']) + 1 }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        200
      ],
      "id": "a2530723-0ffe-469b-a90b-288db9a3e05b",
      "name": "i++"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        800,
        200
      ],
      "id": "1ff1b607-61a2-41ff-a453-1f91a6f572f8",
      "name": "Wait",
      "webhookId": "c85f78c4-c829-4f57-bee5-fdb9cf1e31c1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const { parseDocument } = require(\"htmlparser2\");\nconst { findOne, textContent, findAll } = require(\"domutils\");\n\n// HTML récupéré via HTTP Request\nconst html = $json.data;\n\n// Parse le document\nconst root = parseDocument(html);\n\nconst keyValuePairs = [];\n\nconst rows = findAll(el => el.name === 'tr', root.children, true);\n\nfor (const row of rows) {\n  const cells = row.children.filter(el => el.name === 'td');\n  if (cells.length >= 2) {\n    const key = textContent(cells[0]).trim().replace(/\\s+/g, ' ');\n    const value = textContent(cells[1]).trim().replace(/\\s+/g, ' ');\n    if (key && key !== '' && value && value !== '') keyValuePairs.push({ key, value });\n  }\n}\n\nreturn { json: { keyValuePairs } }\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        200
      ],
      "id": "2a0e2604-f9b6-4ab7-a79d-932db5042d3c",
      "name": "HTML to JSON"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const pairs = $json.keyValuePairs;\n\n// Table de correspondance : clé HTML → nom de champ structuré\nconst mapping = {\n  \"SIREN\": \"siren\",\n  \"SIRET du siège social\": \"siret\",\n  \"Activité principale (NAF/APE)\": \"activity_main\",\n  \"Code NAF/APE\": \"code_naf\",\n  \"Adresse postale\": \"address\",\n  \"Forme juridique\": \"legal_form\",\n  \"Effectif salarié\": \"workforce\",\n  \"Taille de la structure La taille de l’entreprise, ou catégorie d’entreprise, est une variable statistique calculée par l’Insee sur la base de l’effectif, du chiffre d’affaires et du total du bilan.\": \"company_size\",\n  \"Date de création\": \"creation_date\",\n  \"Convention(s) collective(s)\": \"collective_agreement\",\n  \"Date d’immatriculation\": \"registration_date\",\n  \"Date de début d’activité\": \"activity_start_date\",\n  \"Nature de l’entreprise\": \"nature\",\n  \"Capital social Le capital social d’une société est constitué des apports (en argent ou en nature) de ses actionnaires.Il peut être fixe ou variable. La modification d’un capital fixe nécessite une modification des statuts tandis que le capital variable peut varier dans certaines limites sans modification des statuts.\": \"share_capital\",\n  \"Clôture de l’exercice comptable\": \"account_closure\",\n  \"Durée de la personne morale\": \"duration\",\n  \"Enseigne de l’établissement\": \"trade_name\",\n  \"Nom de l’établissement\": \"branch_name\",\n  \"Adresse\": \"branch_address\",\n  \"SIRET\": \"branch_siret\",\n  \"Clef NIC\": \"nic\",\n  \"Activité principale de la société (NAF/APE)\": \"activity_society\",\n  \"Activité principale de l’établissement (NAF/APE)\": \"activity_branch\",\n  \"Code NAF/APE de l’établissement\": \"code_naf_branch\",\n  \"Tranche d’effectif salarié\": \"workforce_range\",\n  \"Date de création de la société\": \"society_creation_date\",\n  \"Date de création de l’établissement\": \"branch_creation_date\",\n  \"Convention collective de l’établissement\": \"branch_collective_agreement\",\n  \"Justificatif(s) d’existence\": \"proof\", // ou autre si utile\n};\n\n\nfunction normalize(str) {\n  return str\n    .normalize(\"NFKD\")                 // supprime les accents\n    .replace(/[’']/g, \"'\")             // uniformise les apostrophes\n    .replace(/\\s+/g, ' ')              // espaces multiples\n    .trim()\n    .toLowerCase();                    // insensible à la casse\n}\n\n// Extraction\nconst entreprise = {};\n\nfor (const pair of pairs) {\n  const label = pair.key.trim();\n  const field = mapping[label];\n  if (!field) continue;\n\n  if (!entreprise[field]) {\n    entreprise[field] = pair.value.trim();\n  }\n}\n\nreturn { json: { entreprise } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        200
      ],
      "id": "5d6be12d-1f1b-4c4b-b81e-3b64f6975496",
      "name": "JSON Mapping"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1440,
        200
      ],
      "id": "6d7033c8-e5a4-4e44-aeb9-2eb2c8784d96",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n$input.item.json.myNewField = 1;\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        200
      ],
      "id": "12d801b1-54ae-4e76-9573-c716671124d3",
      "name": "Prepare Update"
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1760,
        200
      ],
      "id": "5fa92bc6-a284-4b3b-9985-368cd8dd4e9a",
      "name": "MongoDB1",
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "url": "=http://puppeteer:3000/render",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "=https://annuaire-entreprises.data.gouv.fr/entreprise/{{ $json.company_details.siren }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        200
      ],
      "id": "4dde02f7-4811-457d-93b5-e71a8d9f3aec",
      "name": "HTTP Puppeteer Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Requête API Pappers",
            "type": "main",
            "index": 0
          },
          {
            "node": "Scraping WTTJ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scraping WTTJ": {
      "main": [
        [
          {
            "node": "Préparer contenu pour LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer contenu pour LLM": {
      "main": [
        [
          {
            "node": "Appel LLM (Ollama)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Requête API Pappers": {
      "main": [
        [
          {
            "node": "Fusionner données",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fusionner données": {
      "main": [
        []
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "i = 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "i = 0": {
      "main": [
        [
          {
            "node": "i",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "i": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "i++": {
      "main": [
        [
          {
            "node": "i",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Puppeteer Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML to JSON": {
      "main": [
        [
          {
            "node": "JSON Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Mapping": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Prepare Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update": {
      "main": [
        [
          {
            "node": "MongoDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB1": {
      "main": [
        [
          {
            "node": "i++",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Puppeteer Request": {
      "main": [
        [
          {
            "node": "HTML to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4f83571b-cc90-40fd-b789-ba9a79c86f0f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "19c6579963f41f7ac923da5748a73a55febeb833fee63b0958a6ffeafde86fda"
  },
  "id": "Yo6MknghXf6YYbUA",
  "tags": []
}