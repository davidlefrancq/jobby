{
  "name": "France Travail Workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2500,
        620
      ],
      "id": "4cc05196-e8fa-4ef6-acbb-fc7d86d682c1",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2220,
        480
      ],
      "id": "ecf02eaf-8eba-4f73-9f51-8df60f6c93a7",
      "name": "Get Labels",
      "webhookId": "4082dee3-6eee-43fd-bafb-8c0286ca1b67",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Liste des labels qu'on souhaite vérifier\nconst requiredLabels = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\n// Liste des labels déjà existants (récupérés de Gmail)\nconst existingLabels = items.map(item => item.json.name);\n\n// Labels manquants à créer\nconst missing = requiredLabels.filter(name => !existingLabels.includes(name));\n\n// On retourne un item par label à créer\nreturn missing.map(name => ({\n  json: {\n    name,\n    labelListVisibility: \"labelShow\",\n    messageListVisibility: \"show\"\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        580
      ],
      "id": "df116783-d2c1-4163-8faf-9b39dbee4f7e",
      "name": "MissingLabels",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "label",
        "operation": "create",
        "name": "={{ $json.name }}",
        "options": {
          "labelListVisibility": "labelShow",
          "messageListVisibility": "show"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1880,
        580
      ],
      "id": "cd0db98b-912a-4989-97e2-0c3e8b7c0312",
      "name": "Create Labels",
      "webhookId": "20805d82-3abc-44ed-ab69-29945ec7351b",
      "executeOnce": false,
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -1700,
        480
      ],
      "id": "4fd1965e-3274-44ba-b096-c9de968fa873",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const labels = items.map(item => item.json.name);\n\nconst required = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\nconst allPresent = required.every(r => labels.includes(r));\n\nif (allPresent) {\n  return [{ json: { ready: true } }];\n} else {\n  return [];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        480
      ],
      "id": "a0d237c6-ebae-4109-9cb8-c242bf6e4e56",
      "name": "CheckLabels"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7b35100d-dcaa-4f0e-81e5-cd7a787ba93d",
              "leftValue": "={{ $json.ready }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1320,
        480
      ],
      "id": "23b2ba4c-5d1d-462d-b9e5-fbdf7c8dab10",
      "name": "If Labels Ready",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 25,
        "simple": false,
        "filters": {
          "q": "=after: {{ new Date(Date.now() - 17 * 864e5).toISOString().slice(0, 10).replace(/-/g, '/') }}",
          "sender": "service-candidat@francetravail.fr"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1080,
        480
      ],
      "id": "f90ecd3f-4bda-4f2c-9fb8-b4fddc83ee84",
      "name": "Get David Mails",
      "webhookId": "a78ec4c4-96ed-4cb4-98d9-278c5a562fd3",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $json.id }}",
        "labelIds": [
          "Label_110"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -220,
        680
      ],
      "id": "994bbeb1-1a82-4506-a70d-10a0bf67fc33",
      "name": "Set Label to Emploi/Pole-Emploi",
      "webhookId": "e909a7e7-b389-4b89-b763-1df091ca6edf",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Labels Check",
        "height": 400,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2280,
        380
      ],
      "id": "057f56ef-cbdc-4033-b872-fcca79a4523d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Get Mails",
        "height": 400,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        380
      ],
      "id": "88a7aa56-1c9b-49cc-8b50-0af30ee24855",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Switch",
        "height": 400,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -640,
        380
      ],
      "id": "5ea8983b-20ce-4516-a5fd-ad838aed7bfa",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "jobalerts-noreply@linkedin.com",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "08174c47-f7b7-4ee2-acb8-52f2638fe94b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "LinkedIn"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e4ffe735-ec03-4878-9038-0afb9ce35603",
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "service-candidat@francetravail.fr",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "FranceTravail"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fc448396-41e7-4cf3-9c0f-74685465e21b",
                    "leftValue": "={{ $json.from.value[0].address }}",
                    "rightValue": "googlealerts-noreply@google.com",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "GoogleAlerts"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -600,
        480
      ],
      "id": "c2186dba-e598-4a7f-8580-5b2f3f08f2ef",
      "name": "Switch from Sender"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc04684b-256c-49da-a5fd-97f4ced2a422",
              "leftValue": "={{ $json.labelIds.includes(\"Label_107\") }}",
              "rightValue": "no-reply@twitch.tv",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "676cc4da-d457-4234-8f44-616b52c6a179",
              "leftValue": "={{ $json.labelIds.includes(\"Label_108\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "580a63d8-a896-480d-8fc0-f59f27ed9e82",
              "leftValue": "={{ $json.labelIds.includes(\"Label_109\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "91ff16f6-e8e0-415b-9a92-9d04d7c15b01",
              "leftValue": "={{ $json.labelIds.includes(\"Label_110\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -840,
        600
      ],
      "id": "1af832d7-c9bb-49e4-ad82-6b877e77b005",
      "name": "if not labeled",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Not Job Labeled",
        "height": 400,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        380
      ],
      "id": "440afd2c-4d1a-422e-833a-5427eddff21b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Pole Emploi Email Processing",
        "height": 500,
        "width": 2280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -300,
        380
      ],
      "id": "850ccd7e-64ca-4d6c-87e9-dd5bf326ca1e",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "jobs",
        "fields": "title,date,company,location,teleworking,contract_type,language,salary,description,content,technologies,methodologies,level,source,original_job_id,interest_indicator,createdAt",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        2240,
        480
      ],
      "id": "fc9e796f-a62a-4ef9-ac14-2b996e60ec19",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un assistant IA expert en analyse d’opportunités d’emploi tech.\n\nTu reçois ci-dessous une description d'offre d'emploi sous forme de contenu JSON. La description doit être résumée, concise, pertinente de mon point de vue de recherche d'emploi. Mets le focus sur les infos disponibles, pas sur ce qu'il manque.\n\nTa tâche est d'analyser ce contenu et de retourner uniquement un objet JSON conforme à la structure cible. Tu dois impérativement ignorer toute introduction, explication ou commentaire.\n\nContenu : \n{{ JSON.stringify($json, null, 2) }}\n\nRetour attendu :\n- uniquement un objet JSON\n- teleworking: true si le télétravail est mentionné sinon false.\n- pour salary: { \"min\": 0, \"max\": 0, \"currency\": \"EUR\" }, min et/ou max doivent être mis à jour si une ou plusieurs valeurs de salaire sont détectées.\n- pour description: résumé concis de l'offre d'emploi (contexte, environnement de travail, mission).\n+ pour methodologies: liste dans un tableau JSON (`string[]`) les éléments méthodologiques de gestion et de conception comme \"Agile\", \"Waterfall\", \"POO\", etc. Même s’il n’y en a pas, retourne un tableau vide (`[]`).\n+ pour technologies: liste dans un tableau JSON (`string[]`) les technologies mentionnées dans l’annonce (ex: \"Java\", \"React\", \"ERP\"). Même s’il n’y en a pas, retourne un tableau vide (`[]`).\n- pour level: \"junior\" | \"intermediate\" | \"senior\" | \"lead\" | \"\"\n- pour source: {{ $json.source }}\n- pour interest_indicator: \"🟢 Pertinant pour le developpemnt logiciel\" | \"🟡 Poste informatique à vérifier\" | \"🔴 Inintéressant car hors sujet\" mais tu conserves uniquement l'émoji 🟢 | 🟡 | 🔴.\n- pour title: {{ $json.title || \"\" }}\n- pour language: tu dois identifier de manière concise la langue utiliser dans la description de l'annonce.\n- contract_type: mets les toutes les informations que tu trouve de type CDI, CDD, Interim, freelance, temp plein, temp partiel, 35 heures, 39 heures, etc.\n- pour toute valeur abscente, conforme toi au type pour mettre \"\" ou [] ou false.\nComme une API, réponds strictement conforme à cette structure :\n{\n  \"title\": \"{{ $json.title || \"\" }}\",\n  \"date\": \"{{ $json.date || \"\" }}\",\n  \"company\": \"{{ $json.company || \"\" }}\",\n  \"location\": \"{{ $json.location || \"\" }}\",\n  \"teleworking\": true | false,\n  \"contract_type\": string,\n  \"language\": string,\n  \"salary\": {\n    \"min\": 0,\n    \"max\": 0,\n    \"currency\": \"EUR\"\n  },\n  \"level\": \"junior\" | \"intermediate\" | \"senior\" | \"lead\" | \"\",\n  \"description\": string,\n  \"technologies\": string[],\n  \"methodologies\": string[],\n  \"source\": \"{{ $json.source }}\",\n  \"interest_indicator\": 🟢 | 🟡 | 🔴\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        960,
        480
      ],
      "id": "e3854a63-e5a8-429c-afe7-4a55614332df",
      "name": "AI Agent  for Pole Emploi",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "path": "9da789a5-4890-461c-b6a1-19286c0b2102",
        "responseMode": "lastNode",
        "responseData": "noData",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2500,
        480
      ],
      "id": "fee557c1-ec65-4fb6-9bd9-30ab22b033a1",
      "name": "Webhook",
      "webhookId": "9da789a5-4890-461c-b6a1-19286c0b2102"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d0718-5d47-479a-a300-5889d1896359",
              "leftValue": "={{ $json.source }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        480
      ],
      "id": "d18f0e8e-cc57-4695-a4a9-591bdacc0eef",
      "name": "If source not empty"
    },
    {
      "parameters": {
        "jsCode": "const outputs = [];\n\nfor (const item of $input.all()) {\n  const html = item.json.html || '';\n  const links = [...html.matchAll(/https:\\/\\/candidat\\.francetravail\\.fr\\/offres\\/recherche\\/detail\\/([\\w\\d]+)\\?[^\"]*/g)];\n\n  for (const match of links) {\n    const ref = match[1];\n    if (ref) outputs.push({\n      link: `https://candidat.francetravail.fr/offres/recherche/detail/${ref}`\n    })\n  }\n}\n\nreturn outputs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        480
      ],
      "id": "9b369882-4e47-4130-ac7a-2473c4dcc26f",
      "name": "FT Job Splitter"
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        480
      ],
      "id": "c6a8e096-6bd6-4bad-8d4d-5973329affec",
      "name": "Job Page Request",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function getTitle(html) {\n  const m = html.match(/<span\\s+itemprop=\"title\">([^<]+)<\\/span>/);\n  return m ? m[1].trim() : null;\n}\n\nfunction getDate(html) {\n  const m = html.match(\n    /(?:Actualisé|Publié) le\\s+(\\d{1,2}\\s+[A-Za-zÀ-ÿ]+\\s+\\d{4})/i\n  );\n  return m && m[1] ? m[1] : null;\n}\n\nfunction toIsoDate(frDate) {\n  if (!frDate) return null;\n  // ex. \"07 mai 2025\"\n  const parts = frDate.split(' ');\n  const j = parts[0].padStart(2,'0');\n  const moisMap = {\n    janvier: '01', février: '02', mars: '03', avril: '04',\n    mai: '05', juin: '06', juillet: '07', août: '08',\n    septembre: '09', octobre: '10', novembre: '11', décembre: '12'\n  };\n  const m = moisMap[parts[1].toLowerCase()];\n  const a = parts[2];\n  return m ? `${a}-${m}-${j}` : null;\n}\n\nfunction getCompany(html) {\n  // 1) Schéma Organization\n  let m = html.match(\n    /<span\\s+itemtype=\"http:\\/\\/schema\\.org\\/Organization\"[\\s\\S]*?<span[^>]*itemprop=\"name\"[^>]*content=\"([^\"]+)\"/i\n  );\n  if (m && m[1]) return m[1].trim();\n\n  // 2) Section Employeur\n  m = html.match(\n    /<h2 class=\"t5 subtitle\">\\s*Employeur\\s*<\\/h2>[\\s\\S]*?<h3 class=\"t4 title\">\\s*([^<]+)\\s*<\\/h3>/i\n  );\n  if (m && m[1]) return m[1].trim();\n\n  return null;\n}\n\nfunction getLocation(html) {\n  const m = html.match(/<span\\s+class=\"location\">([^<]+)<\\/span>/);\n  return m ? m[1].trim() : null;\n}\n\nfunction getDescription(html) {\n  const m = html.match(\n    /<div\\s+itemprop=\"description\"[^>]*>([\\s\\S]*?)<\\/div>/\n  );\n  return m\n    ? m[1].replace(/<[^>]+>/g, '').trim()\n    : null;\n}\n\nfunction getJobId(html) {\n  const m = html.match(/Offre n°\\s*<span[^>]*>([A-Za-z0-9]+)<\\/span>/);\n  return m ? m[1] : null;\n}\n\nconst response = { json: {} }\nif ($json.data) {\n  const html = $json.data;\n  const title = getTitle(html)\n  const date = toIsoDate(getDate(html));\n  const company = getCompany(html);\n  const location = getLocation(html);\n  const description = getDescription(html);\n  const jobId = getJobId(html);\n  const source = jobId ? `https://candidat.francetravail.fr/offres/recherche/detail/${jobId}` : null;\n  response.json = { title, date, company, location, description, source };\n}\n\n\nreturn response;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        480
      ],
      "id": "b653cd0c-2cec-4007-94fe-efa98331bbf3",
      "name": "Job Data Extractor",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const response = { json: {} };\n\nif ($json.source) {\n  response.json = $json\n  if (response.json.title === null) response.json.title = \"\";\n  if (response.json.date === null) response.json.date = \"\";\n  if (response.json.company === null) response.json.company = \"\";\n  if (response.json.location === null) response.json.location = \"\";\n  if (response.json.description === null) response.json.description = \"\";\n}\n\nreturn response;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        480
      ],
      "id": "8d9cf289-3947-48e2-bbe6-73053a346077",
      "name": "Job Checking",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractJobId(url) {\n  const match = url.match(/\\/detail\\/([A-Za-z0-9]+)(?:\\/)?$/);\n  return match ? match[1] : null;\n}\n\n// Extract original jon id\n$input.item.json.original_job_id = extractJobId($json.source);\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        480
      ],
      "id": "95157ee5-69a7-4a2f-bda3-81349346adaf",
      "name": "Job ID Extractor",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Save in database",
        "height": 500,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2000,
        380
      ],
      "id": "0620735e-7bab-4308-9626-93aff92d782d",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.createdAt = new Date().toISOString();\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        480
      ],
      "id": "4be11f9d-af13-462b-a352-ba6913f3879e",
      "name": "CreatedAt"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -40,
        480
      ],
      "id": "5a924f79-5368-4eb9-b01a-c943dc5c3016",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2380388e-48fe-42df-bc3e-b34073f38226",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "08056162-5ccd-4818-bfce-7780586bf06d",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        320,
        480
      ],
      "id": "ef49cdea-2f86-454f-8a6a-9330a4e2924f",
      "name": "If data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1280,
        480
      ],
      "id": "e0e8260f-423b-4e61-a13e-206a6d16f0ee",
      "name": "Merge data"
    },
    {
      "parameters": {
        "jsCode": "let job = null\nlet data = null\n\nlet target = 0\nfor (const item of $input.all()) {\n  if (target === 0) data = item.json\n  if (target === 1) job = item.json.output\n  target++\n}\n\nif (job && data) {\n  job.content = data.description\n  job.source = data.source\n  if (!job.title || job.title === '') job.title = data.title || ''\n  if (!job.location || job.location === '') job.location = data.location || ''\n  if (!job.company || job.company === '') job.company = data.company || ''\n}\n\nreturn [ { json: job } ];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        480
      ],
      "id": "efa9b81a-0810-4d2c-b4c4-bda518876837",
      "name": "Prepare data",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8902a81e-e8ec-4ab6-8c7d-62f711b37064",
              "leftValue": "$json.source",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "b863205e-a016-49b5-b363-9fa6cea1cb1b",
              "leftValue": "$json.source",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        800,
        480
      ],
      "id": "19a87fb6-ce08-4bca-bafc-b26047a6ebd1",
      "name": "If source",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"date\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"company\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"location\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"teleworking\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"contract_type\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"language\": {\n      \"type\": \"string\",\n      \"default\": \"french\"\n    },\n    \"salary\": {\n      \"type\": \"object\",\n      \"required\": [\"min\", \"max\", \"currency\"],\n      \"properties\": {\n        \"min\": {\n          \"type\": \"number\",\n          \"minimum\": 0\n        },\n        \"max\": {\n          \"type\": \"number\",\n          \"minimum\": 0\n        },\n        \"currency\": {\n          \"type\": \"string\",\n          \"enum\": [\"EUR\", \"GBP\", \"USD\", \"CHF\", \"\"],\n          \"default\": \"\"\n        }\n      }\n    },\n    \"level\": {\n      \"type\": \"string\",\n      \"enum\": [\"junior\", \"intermediate\", \"senior\", \"lead\", \"\"],\n      \"default\": \"\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"technologies\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": []\n    },\n    \"methodologies\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": []\n    },\n    \"source\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"interest_indicator\": {\n      \"type\": \"string\",\n      \"enum\": [\"🟢\", \"🟡\", \"🔴\"],\n      \"default\": \"🟡\"\n    }\n  }\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1080,
        700
      ],
      "id": "72cca01b-9b5e-4e6d-9bd6-e877de7ab6c7",
      "name": "Structured Output Parser",
      "notesInFlow": false
    },
    {
      "parameters": {
        "model": "mistral-nemo:latest",
        "options": {
          "keepAlive": "10m"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        1040,
        860
      ],
      "id": "7a755cad-11a4-498a-8976-89eaf2587847",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "8wRs8JzjQgAfnmvC",
          "name": "Ollama account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MissingLabels": {
      "main": [
        [
          {
            "node": "Create Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "MissingLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "CheckLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckLabels": {
      "main": [
        [
          {
            "node": "If Labels Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Labels Ready": {
      "main": [
        [
          {
            "node": "Get David Mails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get David Mails": {
      "main": [
        [
          {
            "node": "if not labeled",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch from Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch from Sender": {
      "main": [
        [],
        [
          {
            "node": "FT Job Splitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Label to Emploi/Pole-Emploi",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "if not labeled": {
      "main": [
        [
          {
            "node": "Switch from Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent  for Pole Emploi": {
      "main": [
        [
          {
            "node": "Merge data",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If source not empty": {
      "main": [
        [
          {
            "node": "CreatedAt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FT Job Splitter": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Page Request": {
      "main": [
        [
          {
            "node": "If data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Data Extractor": {
      "main": [
        [
          {
            "node": "Job Checking",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Checking": {
      "main": [
        [
          {
            "node": "If source",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job ID Extractor": {
      "main": [
        [
          {
            "node": "If source not empty",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreatedAt": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Job Page Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If data": {
      "main": [
        [
          {
            "node": "Job Data Extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge data": {
      "main": [
        [
          {
            "node": "Prepare data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare data": {
      "main": [
        [
          {
            "node": "Job ID Extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If source": {
      "main": [
        [
          {
            "node": "AI Agent  for Pole Emploi",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent  for Pole Emploi",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent  for Pole Emploi",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Paris",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 900,
    "errorWorkflow": "4oyLsKPXUj8PChjg",
    "timeSavedPerExecution": 15
  },
  "versionId": "3ef9aae1-b950-4157-b6ad-0164a15c537a",
  "meta": {
    "instanceId": "2185c08ba0bd3d9cd7425d520bc9fcd28ce2fdc332ddea29da7bb31748895273",
    "templateCredsSetupCompleted": true
  },
  "id": "4oyLsKPXUj8PChjg",
  "tags": []
}