{
  "name": "France Travail Gmail Workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2500,
        620
      ],
      "id": "dbdb40c7-7473-427c-97ce-4e58c4a44b4a",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2220,
        480
      ],
      "id": "f6aa22dc-8dc0-4e70-a1b4-0ef3bcfbccbd",
      "name": "Get Labels",
      "webhookId": "2dcb1814-0b73-4bfe-830f-97dc5e2b24d6",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Liste des labels qu'on souhaite vérifier\nconst requiredLabels = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\n// Liste des labels déjà existants (récupérés de Gmail)\nconst existingLabels = items.map(item => item.json.name);\n\n// Labels manquants à créer\nconst missing = requiredLabels.filter(name => !existingLabels.includes(name));\n\n// On retourne un item par label à créer\nreturn missing.map(name => ({\n  json: {\n    name,\n    labelListVisibility: \"labelShow\",\n    messageListVisibility: \"show\"\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        580
      ],
      "id": "02a28703-a57b-4fcf-a1cd-3c95d3774b33",
      "name": "MissingLabels",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "label",
        "operation": "create",
        "name": "={{ $json.name }}",
        "options": {
          "labelListVisibility": "labelShow",
          "messageListVisibility": "show"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1880,
        580
      ],
      "id": "62f1794e-9c87-41f6-b1e1-fddbe5d8f282",
      "name": "Create Labels",
      "webhookId": "2d141102-9abb-4fd2-a46f-6b430e56dbcc",
      "executeOnce": false,
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -1700,
        480
      ],
      "id": "da8da30b-eae2-49d6-9949-94affc3721c6",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const labels = items.map(item => item.json.name);\n\nconst required = [\"Emploi\", \"Emploi/LinkedIn\", \"Emploi/Google-Alerte\", \"Emploi/Pole-Emploi\"];\n\nconst allPresent = required.every(r => labels.includes(r));\n\nif (allPresent) {\n  return [{ json: { ready: true } }];\n} else {\n  return [];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        480
      ],
      "id": "d9839531-c50d-4ad6-b696-6c224d27aa86",
      "name": "CheckLabels"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7b35100d-dcaa-4f0e-81e5-cd7a787ba93d",
              "leftValue": "={{ $json.ready }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1320,
        480
      ],
      "id": "d83df3b4-735d-4a49-9967-4170d80c7ad5",
      "name": "If Labels Ready",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 15,
        "simple": false,
        "filters": {
          "q": "=after: {{ new Date(Date.now() - 14 * 864e5).toISOString().slice(0, 10).replace(/-/g, '/') }}",
          "sender": "@francetravail.fr"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1080,
        480
      ],
      "id": "9c408671-784a-46e7-9d22-36e545675d21",
      "name": "Get David Mails",
      "webhookId": "c898c61f-2e9c-47d3-af3d-256bb47bef9f",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $json.id }}",
        "labelIds": [
          "Label_110"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -560,
        920
      ],
      "id": "ab867204-1983-4fc0-a174-adcb3ed96b24",
      "name": "Set Label to Emploi/Pole-Emploi",
      "webhookId": "5eef5f02-cb32-4bcf-bfc2-e5d494499126",
      "credentials": {
        "gmailOAuth2": {
          "id": "d7Qw3dVitA4B96FP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Labels Check",
        "height": 480,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2280,
        300
      ],
      "id": "39af0983-7cce-4161-886c-09fa809b3fa4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Get Mails",
        "height": 480,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        300
      ],
      "id": "8b4867e0-a664-4413-a637-6d7ee09656ac",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Check from address",
        "height": 480,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -640,
        300
      ],
      "id": "ee2885cc-3247-4686-9852-51ed57e3b1d8",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Not Job Labeled",
        "height": 480,
        "width": 200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        300
      ],
      "id": "423334e3-f160-40e9-98e9-ad687b59ac64",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "path": "france-travail-gmail",
        "responseMode": "lastNode",
        "responseData": "noData",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2500,
        480
      ],
      "id": "6872028e-1353-4707-aa5b-c68300cb418f",
      "name": "Webhook",
      "webhookId": "3445d5ed-ad66-448a-9629-0fc9a7319a23"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d0718-5d47-479a-a300-5889d1896359",
              "leftValue": "={{ $json.source }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        200,
        480
      ],
      "id": "5d53cea7-0f1f-4003-9a01-e9bbce87b27f",
      "name": "If source not empty",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Save in database",
        "height": 480,
        "width": 760
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        300
      ],
      "id": "5d4236ef-6966-42ac-a5c2-1535d90a337f",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.createdAt = new Date().toISOString();\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1480,
        480
      ],
      "id": "584844f0-a795-4e55-b560-e42ba6bd46a7",
      "name": "CreatedAt",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const sanitizeHtml = require('sanitize-html');\n\nfor (const item of $input.all()) {\n  // title\n  item.json.title = item.json.title ? sanitizeHtml(item.json.title) : '';\n  // date\n  item.json.date = item.json.date ? sanitizeHtml(item.json.date) : '';\n  // company\n  item.json.company = item.json.company ? sanitizeHtml(item.json.company) : '';\n  // location\n  item.json.location = item.json.location ? sanitizeHtml(item.json.location) : '';\n  // teleworking\n  item.json.teleworking = item.json.teleworking === true ? true : false;\n  // contract_type\n  item.json.contract_type = item.json.contract_type ? sanitizeHtml(item.json.contract_type) : '';\n  // language\n  item.json.language = item.json.language ? sanitizeHtml(item.json.language) : '';\n  // salary\n  if (item.json.salary) {\n    item.json.salary.currency = item.json.salary.currency ? sanitizeHtml(item.json.salary.currency) : '';\n    item.json.salary.min = item.json.salary.min ? parseFloat(item.json.salary.min) : 0;\n    item.json.salary.max = item.json.salary.max ? parseFloat(item.json.salary.max) : 0;\n  }\n  // description\n  item.json.description = item.json.description ? sanitizeHtml(item.json.description) : '';\n  // content\n  item.json.content = item.json.content ? sanitizeHtml(item.json.content) : '';\n  // technologies\n  if (item.json.technologies &&  item.json.technologies.length > 0) {\n    const sanitizedTechnologies = [];\n    for (const tech of item.json.technologies) {\n      const sanitizedTech = sanitizeHtml(tech);\n      sanitizedTechnologies.push(sanitizedTech);\n    }\n    item.json.technologies = sanitizedTechnologies;\n  }\n  // methodologies\n  if (item.json.methodologies &&  item.json.methodologies.length > 0) {\n    const sanitizedMethodologies = [];\n    for (const methodology of item.json.methodologies) {\n      const sanitizedMethodology = sanitizeHtml(methodology);\n      sanitizedMethodologies.push(sanitizedMethodology);\n    }\n    item.json.methodologies = sanitizedMethodologies;\n  }\n  // level\n  item.json.level = item.json.level ? sanitizeHtml(item.json.level) : '';\n  // interest_indicator\n  item.json.interest_indicator = item.json.interest_indicator ? sanitizeHtml(item.json.interest_indicator) : '';\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        480
      ],
      "id": "063a52f6-64b7-41c6-afbb-8db8e6452c3e",
      "name": "Sanitize",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc04684b-256c-49da-a5fd-97f4ced2a422",
              "leftValue": "={{ $json.labelIds.includes(\"Label_107\") }}",
              "rightValue": "no-reply@twitch.tv",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "676cc4da-d457-4234-8f44-616b52c6a179",
              "leftValue": "={{ $json.labelIds.includes(\"Label_108\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "580a63d8-a896-480d-8fc0-f59f27ed9e82",
              "leftValue": "={{ $json.labelIds.includes(\"Label_109\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "91ff16f6-e8e0-415b-9a92-9d04d7c15b01",
              "leftValue": "={{ $json.labelIds.includes(\"Label_110\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -840,
        480
      ],
      "id": "b86dcfa4-07d3-4eb0-b1d3-ef8f038938fd",
      "name": "if not labeled"
    },
    {
      "parameters": {
        "content": "## Check if already exists in DB",
        "height": 480,
        "width": 640,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        420,
        300
      ],
      "id": "a7eac116-1c67-4236-900c-6db595e2556d",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "jsCode": "const outputs = [];\n\nfor (const item of $input.all()) {\n  const html = item.json.html || '';\n  const ids = [...html.matchAll(/https:\\/\\/candidat\\.(francetravail|pole-emploi)\\.fr\\/offres\\/recherche\\/detail\\/([\\w\\d]+)\\?[^\"]*/g)]\n  .map(match => match[2]);\n\n  for (const id of ids) {\n    if (id) outputs.push({\n      original_job_id: id,\n      original_mail_id: `${item.json.id}`,\n      source: `https://candidat.francetravail.fr/offres/recherche/detail/${id}`\n    })\n  }\n}\n\nreturn outputs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        480
      ],
      "id": "da547073-04e4-425d-8900-e71e0802e615",
      "name": "FT Job Splitter",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -40,
        480
      ],
      "id": "d527492c-db8c-44f2-bc7e-fa960a13c0db",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if (!$json._id) {\n  return $json\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        480
      ],
      "id": "1e898af6-8b94-452a-ac09-cfbcf81f1e7e",
      "name": "Check if exist",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        680,
        480
      ],
      "id": "6acd6baf-6875-4e06-ae1e-c7ca699ea838",
      "name": "Combine",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Data extractor",
        "height": 480,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -300,
        300
      ],
      "id": "cbc78290-fadd-4062-b3ee-38cdb44eb38f",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dec81623-dd27-4b76-b7c0-e21b56bdea5a",
              "leftValue": "={{ $json.from.value[0].address }}",
              "rightValue": "francetravail.fr",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -580,
        480
      ],
      "id": "260b0991-c2f2-403c-9171-ad608e41414d",
      "name": "If FranceTravail",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Set Label",
        "height": 480,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -640,
        820
      ],
      "id": "a55bb8ea-045c-48bb-9cdf-a3bc13b2f148",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.collective_agreement = null;\n  item.json.company_details = null;\n  item.json.cv_id = null;\n  item.json.motivation_letter = null;\n  item.json.motivation_email = null;\n  item.json.motivation_email_draft_url = null;\n  item.json.motivation_email_subject = null;\n  item.json.motivation_email_to = null;\n  item.json.outdated = false;\n  item.json.outdated_reason = null;\n  item.json.outdated_date = null;\n  item.json.preference = null;\n  item.json.processing_stage = 'initialized';\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1300,
        480
      ],
      "id": "08507433-da58-4fb3-854f-3486e6698cc0",
      "name": "Default Values",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "collection": "jobs",
        "options": {},
        "query": "={\"source\": \"{{ $json.source }}\"}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        480,
        380
      ],
      "id": "d9f49c00-260d-4a5c-9510-50f7bc5c7362",
      "name": "DB - Get Job",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "jobs",
        "fields": "title,date,company,location,teleworking,contract_type,language,salary,description,content,technologies,methodologies,level,source,original_job_id,original_mail_id,processing_stage,interest_indicator,createdAt,collective_agreement,company_details,cv_id,motivation_letter,motivation_email,motivation_email_draft_url,motivation_email_subject,motivation_email_to,outdated,outdated_reason,outdated_date,preference,processing_stage",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1660,
        480
      ],
      "id": "fd5244b5-36ac-42e7-a36e-56cd1188a898",
      "name": "DB - Save Job",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MissingLabels": {
      "main": [
        [
          {
            "node": "Create Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Labels": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "MissingLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "CheckLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckLabels": {
      "main": [
        [
          {
            "node": "If Labels Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Labels Ready": {
      "main": [
        [
          {
            "node": "Get David Mails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get David Mails": {
      "main": [
        [
          {
            "node": "if not labeled",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Labels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If source not empty": {
      "main": [
        [
          {
            "node": "Combine",
            "type": "main",
            "index": 1
          },
          {
            "node": "DB - Get Job",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "CreatedAt": {
      "main": [
        [
          {
            "node": "DB - Save Job",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sanitize": {
      "main": [
        [
          {
            "node": "Default Values",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if not labeled": {
      "main": [
        [
          {
            "node": "If FranceTravail",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Label to Emploi/Pole-Emploi",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "FT Job Splitter": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "If source not empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if exist": {
      "main": [
        [
          {
            "node": "Sanitize",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine": {
      "main": [
        [
          {
            "node": "Check if exist",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If FranceTravail": {
      "main": [
        [
          {
            "node": "FT Job Splitter",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Default Values": {
      "main": [
        [
          {
            "node": "CreatedAt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Get Job": {
      "main": [
        [
          {
            "node": "Combine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Save Job": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Paris",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 900,
    "errorWorkflow": "4oyLsKPXUj8PChjg",
    "timeSavedPerExecution": 15
  },
  "versionId": "b87cd222-dafe-4c04-990a-40092f87d1d7",
  "meta": {
    "instanceId": "2185c08ba0bd3d9cd7425d520bc9fcd28ce2fdc332ddea29da7bb31748895273",
    "templateCredsSetupCompleted": true
  },
  "id": "78YiOkjA3d5KhOZl",
  "tags": []
}