{
  "name": "Company Details Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "enrich-company-details",
        "responseMode": "lastNode",
        "responseData": "noData",
        "options": {}
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -40,
        200
      ],
      "id": "58acdd42-ce2f-4816-9a31-62ed701bd675",
      "webhookId": "1ef54366-17e3-4d08-8410-d8d6b5ac532b"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        740,
        260
      ],
      "id": "11b974ed-df72-470f-ae9e-a9e3c56a9b98",
      "name": "Wait",
      "webhookId": "0aced321-4839-41a0-8cd1-b96906b50ac9"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const { parseDocument } = require(\"htmlparser2\");\nconst { findOne, textContent, findAll } = require(\"domutils\");\n\n// HTML récupéré via HTTP Request\nconst html = $json.data;\n\n// Parse le document\nconst root = parseDocument(html);\n\nconst keyValuePairs = [];\n\nconst rows = findAll(el => el.name === 'tr', root.children, true);\n\nfor (const row of rows) {\n  const cells = row.children.filter(el => el.name === 'td');\n  if (cells.length >= 2) {\n    const key = textContent(cells[0]).trim().replace(/\\s+/g, ' ');\n    const value = textContent(cells[1]).trim().replace(/\\s+/g, ' ');\n    if (key && key !== '' && value && value !== '') keyValuePairs.push({ key, value });\n  }\n}\n\nreturn { json: { keyValuePairs } }\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        260
      ],
      "id": "ac1c4246-328c-4bbb-96e6-814ce1ea8653",
      "name": "HTML to JSON"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const pairs = $json.keyValuePairs;\n\n// Table de correspondance : clé HTML → nom de champ structuré\nconst mapping = {\n  \"SIREN\": \"siren\",\n  \"SIRET du siège social\": \"siret\",\n  \"Activité principale (NAF/APE)\": \"activity_main\",\n  \"Code NAF/APE\": \"code_naf\",\n  \"Adresse postale\": \"location\",\n  \"Forme juridique\": \"legal_form\",\n  \"Effectif salarié\": \"workforce\",\n  \"Taille de la structure La taille de l’entreprise, ou catégorie d’entreprise, est une variable statistique calculée par l’Insee sur la base de l’effectif, du chiffre d’affaires et du total du bilan.\": \"company_size\",\n  \"Date de création\": \"creation_date\",\n  \"Convention(s) collective(s)\": \"collective_agreement\",\n  \"Date d’immatriculation\": \"registration_date\",\n  \"Date de début d’activité\": \"activity_start_date\",\n  \"Nature de l’entreprise\": \"nature\",\n  \"Capital social Le capital social d’une société est constitué des apports (en argent ou en nature) de ses actionnaires.Il peut être fixe ou variable. La modification d’un capital fixe nécessite une modification des statuts tandis que le capital variable peut varier dans certaines limites sans modification des statuts.\": \"share_capital\",\n  \"Clôture de l’exercice comptable\": \"account_closure\",\n  \"Durée de la personne morale\": \"duration\",\n  \"Enseigne de l’établissement\": \"trade_name\",\n  \"Nom de l’établissement\": \"branch_name\",\n  \"Adresse\": \"branch_address\",\n  \"SIRET\": \"branch_siret\",\n  \"Clef NIC\": \"nic\",\n  \"Activité principale de la société (NAF/APE)\": \"activity_society\",\n  \"Activité principale de l’établissement (NAF/APE)\": \"activity_branch\",\n  \"Code NAF/APE de l’établissement\": \"code_naf_branch\",\n  \"Tranche d’effectif salarié\": \"workforce_range\",\n  \"Date de création de la société\": \"society_creation_date\",\n  \"Date de création de l’établissement\": \"branch_creation_date\",\n  \"Convention collective de l’établissement\": \"branch_collective_agreement\",\n  \"Justificatif(s) d’existence\": \"proof\", // ou autre si utile\n};\n\n\nfunction normalize(str) {\n  return str\n    .normalize(\"NFKD\")                 // supprime les accents\n    .replace(/[’']/g, \"'\")             // uniformise les apostrophes\n    .replace(/\\s+/g, ' ')              // espaces multiples\n    .trim()\n    .toLowerCase();                    // insensible à la casse\n}\n\n// Extraction\nconst entreprise = {};\n\nfor (const pair of pairs) {\n  const label = pair.key.trim();\n  const field = mapping[label];\n  if (!field) continue;\n\n  if (!entreprise[field]) {\n    entreprise[field] = pair.value.trim();\n  }\n}\n\nreturn { json: { entreprise } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        260
      ],
      "id": "35d597c8-a8fb-41f8-99ff-eb6ae1364b3d",
      "name": "JSON Mapping"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1380,
        200
      ],
      "id": "5cd4556f-8b8b-4cab-b37c-edcc6d1017ea",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = {\n  _id: $json._id,\n  company_details: $json.company_details\n}\n\n// Company Address\nlet location = null\nif ($json.entreprise.location) {\n  location = {\n    address: null,\n    city: null,\n    country: null,\n    latitude: null,\n    longitude: null,\n    postal_code: null,\n    siret: null,\n    workforce: 0,\n  }\n}\nif ($json.entreprise.location) {\n  const regex = /^(?:[^,]+,\\s*)?(?<street>.+?)\\s+(?<postcode>\\d{5}(?:\\s+CEDEX(?:\\s+\\d+)?)?)\\s+(?<city>.+)$/i;\n  const match = $json.entreprise.location.match(regex);\n  if (match && match.groups) {\n    const { street, postcode, city } = match.groups;\n    if (street) location.address = street;\n    if (postcode) location.postal_code = postcode;\n    if (city) location.city = city;\n  }\n}\n\n// Company workforce\nif($json.entreprise.workforce) {\n  const match = $json.entreprise.workforce.match(/(?<!\\d)(\\d{1,3}(?:\\s?\\d{3})*|\\d+)(?!\\d)/);\n  if (match) {\n    location.workforce = parseInt(match[1])\n  }\n}\n\n// Company siret\nif ($json.entreprise.siret) {\n  location.siret = $json.entreprise.siret.replace(/\\s+/g, '')\n}\n\n// Creation date\nif ($json.entreprise.creation_date) {\n  const [day, month, year] = $json.entreprise.creation_date.split(\"/\").map(Number);\n  const date = new Date(Date.UTC(year, month - 1, day)); // mois indexé à 0\n  const isoUtc = date.toISOString();\n  data.company_details.creation_date = isoUtc  \n}\n\ndata.company_details.global_workforce = $json.entreprise.workforce\ndata.company_details.legal_form = $json.entreprise.legal_form\ndata.company_details.locations = [location]\n\n// Capital\nif($json.entreprise.share_capital) {\n  const regex = /(?<amount>\\d{1,3}(?:[ \\u00A0\\u202F]?\\d{3})*(?:[.,]\\d{2})?)\\s*(?<currency>[^\\d\\s(]+)/i;\n  const match = $json.entreprise.share_capital.match(regex);\n  if (match?.groups) {\n    const amount = parseFloat(match.groups.amount.replace(/[\\s\\u00A0\\u202F]/g, '').replace(',', '.'));\n    const currency = match.groups.currency;\n    if (amount && currency) {\n      data.company_details.share_capital = {\n        amount,\n        currency,\n      }    \n    }\n  }\n}\n\n// Description\nif (!data.company_details.description ) data.company_details.description = ''\nif ($json.entreprise.activity_main) {\n  if (data.company_details.description.length > 0) data.company_details.description += ' '\n  data.company_details.description += $json.entreprise.activity_main + '.'\n}\nif ($json.entreprise.company_size) {\n  if (data.company_details.description.length > 0) data.company_details.description += ' '\n  data.company_details.description += $json.entreprise.company_size + '.'\n}\n\nreturn { json: data }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1540,
        260
      ],
      "id": "e1170305-0f58-4808-bae1-acc332cdc850",
      "name": "Prepare Update"
    },
    {
      "parameters": {
        "url": "=http://puppeteer:3000/render",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "=https://annuaire-entreprises.data.gouv.fr/entreprise/{{ $json.company_details.siren }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        260
      ],
      "id": "03c3f933-81cf-45ad-b0d6-978396842faa",
      "name": "HTTP Puppeteer Request"
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "jobs",
        "updateKey": "_id",
        "fields": "company_details",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1700,
        260
      ],
      "id": "a08834fa-4321-424b-b5f7-7b1b7185e2b5",
      "name": "MongoDB Update Company Details",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d6da1929-cefa-4662-a95b-96a4ee623ada",
              "leftValue": "={{ $json.keys().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "26b214fe-9994-45fd-8d09-f34c5c516835",
              "leftValue": "={{ $json.company_details }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "8943b144-8304-4a42-807b-8cbebecea385",
              "leftValue": "={{ $json.company_details.creation_date }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        520,
        200
      ],
      "id": "2782afb4-e54e-409c-a619-c0e77d3da0cf",
      "name": "If valide"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let id = null;\n\nif ($json.query && $json.query._id && $json.query._id.length > 0) {\n  id = $json.query._id;\n}\n\nif (!id) {\n  if ($json.body && $json.body.length > 0) {\n    const data = JSON.parse($json.body);\n    if (data && data._id && data._id.length > 0) {\n      id = data._id;\n    }\n  }\n}\n\nif (!id || id.length <= 0) {\n  throw new Error('Bad input.');\n}\n\nreturn { json: { _id: id }};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        200
      ],
      "id": "36b02dee-e8d3-4daa-a420-1c334547b1f5",
      "name": "Code"
    },
    {
      "parameters": {
        "collection": "jobs",
        "options": {},
        "query": "={ \"_id\": \"{{ $json._id }}\" }"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        280,
        200
      ],
      "id": "92b0ec9a-7cac-4d35-a9cd-8b14ce1785f1",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      },
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Puppeteer Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML to JSON": {
      "main": [
        [
          {
            "node": "JSON Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Mapping": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Prepare Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update": {
      "main": [
        [
          {
            "node": "MongoDB Update Company Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Puppeteer Request": {
      "main": [
        [
          {
            "node": "HTML to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Update Company Details": {
      "main": [
        []
      ]
    },
    "If valide": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "If valide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "91040478-6964-4724-bd05-258ca5da590c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2185c08ba0bd3d9cd7425d520bc9fcd28ce2fdc332ddea29da7bb31748895273"
  },
  "id": "A9KoQaXUVTIlSJan",
  "tags": []
}