{
  "name": "CV Motivation Letter",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        20
      ],
      "id": "96239171-e437-4796-9dd3-10ba2ef5d13c",
      "name": "When clicking â€˜Execute workflowâ€™"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cv-motivation-letter",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        -160
      ],
      "id": "9778431a-9b00-47b3-93ee-00af8df22779",
      "name": "Webhook",
      "webhookId": "c8cd2dca-0003-4069-9e18-36f0485d1b7c"
    },
    {
      "parameters": {
        "jsCode": "return { json: { jobId: '685018bf3b1e990f3ac362b9', cvId: '685bfe441d258effddb6af79' }};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        20
      ],
      "id": "13e50e83-ee93-4e37-bb3d-fc8645def717",
      "name": "Input Test"
    },
    {
      "parameters": {
        "jsCode": "if (!$json.body || $json.body.length <= 0) {\n  throw new Error('Bad input.')\n}\n\nconst data = JSON.parse($json.body)\n\n// Check jobId\nif (!data || !data.jobId || data.jobId.length <= 0) {\n  throw new Error('Bad input.')\n}\n\n// Check cvId\nif (!data || !data.cvId || data.cvId.length <= 0) {\n  throw new Error('Bad input.')\n}\n\nreturn { json: { jobId: data.jobId, cvId: data.cvId }};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        -160
      ],
      "id": "aff69bc2-04ab-4a3a-b994-2ee0fb2aa8d7",
      "name": "Extract Inputs"
    },
    {
      "parameters": {
        "collection": "jobs",
        "options": {},
        "query": "={ \"_id\": \"{{ $json.jobId }}\" }"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        500,
        -220
      ],
      "id": "1b029be0-31a9-44ca-9402-fc87d4cccbf8",
      "name": "MongoDB Job",
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "collection": "curriculum_vitaes",
        "options": {},
        "query": "={ \"_id\": \"{{ $json.cvId }}\" }"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        500,
        -40
      ],
      "id": "10c8cf5c-9a38-45cf-9695-769dfdbf3fba",
      "name": "MongoDB CV",
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        700,
        -140
      ],
      "id": "61b43839-a57a-48a9-a3b5-d47101947552",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all()\nconst job = data[0]\nconst cv = data[1]\n\nif (\n  !job\n  || !job.json._id\n) throw new Error('Bad request job input.')\n\nif (\n  !cv\n  || !cv.json._id\n) throw new Error('Bad request cv input.')\n\nreturn [{ json: { job: job.json, cv: cv.json } }]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -140
      ],
      "id": "46a32391-023c-4c78-b780-f490fd763283",
      "name": "Check"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un professionnel expert dans la rÃ©daction de lettres de motivation dans le secteur du dÃ©veloppement logiciel.\n\nJe vais te fournir toutes les informations sur le candidat, lâ€™offre dâ€™emploi et lâ€™entreprise ciblÃ©e. Ta mission est de rÃ©diger une **lettre de motivation formelle** destinÃ©e Ã  Ãªtre jointe Ã  un email de candidature. Elle doit Ãªtre structurÃ©e, professionnelle, convaincante, et entiÃ¨rement en franÃ§ais.\n\n---\n\n### ðŸŽ¯ Objectifs :\n\n- Montrer une rÃ©elle comprÃ©hension du poste proposÃ©\n- Mettre en Ã©vidence la correspondance entre le profil du candidat et les attentes du poste\n- Valoriser ses compÃ©tences techniques, son autonomie, sa capacitÃ© Ã  contribuer rapidement\n- Montrer un intÃ©rÃªt sincÃ¨re pour lâ€™entreprise (produit, culture, marchÃ©)\n- Respecter la forme classique dâ€™une lettre de motivation jointe (en-tÃªte, objet, paragraphes, formule de politesse)\n\n---\n\n### ðŸ“Œ Candidat :\n\n- **Nom** : {{ $json.cv.first_name }} {{ $json.cv.last_name }}\n- **Ville** : {{ $json.cv.city ? $json.cv.city : '' }} {{ $json.cv.country ? $json.cv.country : '' }}\n- **Permis** : {{ $json.cv.driving_license ? 'oui' : 'non' }}\n- **Formation** : {{ $json.cv.educations ?? JSON.stringify($json.cv.educations) }}\n- **Centres dâ€™intÃ©rÃªt** : {{ $json.cv.interests ?? JSON.stringify($json.cv.interests) }}\n- **ExpÃ©rience** : {{ $json.cv.experiences ?? JSON.stringify($json.cv.experiences) }}\n- **CompÃ©tences** : {{ $json.cv.skills ?? JSON.stringify($json.cv.skills) }}\n- **Missions clÃ©s** : Concepteur dÃ©veloppeur d'application spÃ©cialiste backend web & web3 avec un skill systÃ¨me et rÃ©seaux.\n\n---\n\n### ðŸ“Œ Offre :\n\n- **Poste** : {{ $json.job.title }}\n- **Entreprise** : {{ $json.job.company }}\n- **Type de contrat** : {{ $json.job.contract_type }}\n- **Localisation** : {{ $json.job.location }}\n- **Stack** : {{ $json.job.technologies ?? JSON.stringify($json.job.technologies) }}\n- **MÃ©thodologies** : {{ $json.job.methodologies ?? JSON.stringify($json.job.methodologies) }}\n- **Salaire annoncÃ©** : {{ $json.job.salary ?? JSON.stringify($json.job.salary) }}\n- **Langue de travail** : {{ $json.job.language }} \n- **Entreprise description** : {{ $json.job.company_details.description }}\n- **Produits** : {{ $json.job.company_details.products ?? JSON.stringify($json.job.company_details.products) }}\n- **Clients** : {{ $json.job.company_details.clients ?? JSON.stringify($json.job.company_details.clients) }}\n\n---\n\nGÃ©nÃ¨re une **lettre de motivation structurÃ©e**, au format classique, en franÃ§ais, prÃªte Ã  Ãªtre jointe Ã  un email de candidature.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1040,
        -140
      ],
      "id": "056ca277-665a-4fb3-b063-aaeb01cc3b9e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "mistral-small3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        1040,
        40
      ],
      "id": "3f09aabe-a78a-4d8c-a95c-d724216c3861",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "8wRs8JzjQgAfnmvC",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1360,
        -140
      ],
      "id": "2b5fc724-e742-4e2d-a2a9-bd5c02acfa64",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "jobs",
        "updateKey": "=_id",
        "fields": "=motivation_letter",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        1680,
        -140
      ],
      "id": "182d0a5a-d870-4b51-9718-a5d8a6851978",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "EkVdtE5MEWwZdbTY",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let job = null;\nlet output = null;\n\nfor (const item of $input.all()) {\n  if (item.json.job) job = item.json.job\n  if (item.json.output) output = item.json.output\n}\n\nconst data = {\n  _id: job ? job._id : null,\n  motivation_letter: output\n}\n\nreturn { json: data }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        -140
      ],
      "id": "f46e5fbc-c82a-4636-8d60-4b5b981fa784",
      "name": "Prepare Update"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all()\nconst job = data[0]\nconst cv = data[1]\n\nif (\n  !job\n  || !job.json._id\n) throw new Error('Bad request job input.')\n\nif (\n  !cv\n  || !cv.json._id\n) throw new Error('Bad request cv input.')\n\njob.json.motivation_email = '';\njob.json.motivation_letter = '';\n\nreturn [{ json: { job: job.json, cv: cv.json } }]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -720
      ],
      "id": "c83edfdf-8ca9-4e67-a258-be52238036b5",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un assistant spÃ©cialisÃ© dans la rÃ©daction de lettres de motivation formelles. Ta tÃ¢che est de gÃ©nÃ©rer uniquement la section en-tÃªte et objet de la lettre, en respectant les rÃ¨gles typographiques franÃ§aises et en adoptant un style sobre et professionnel.\n\n### Instructions :\n\n1. **Structure de l'en-tÃªte :**\n   - Place les informations du candidat en haut Ã  gauche.\n   - Place les informations de l'entreprise en haut Ã  droite.\n   - La date et l'objet doivent Ãªtre placÃ©s en dessous de l'en-tÃªte.\n\n2. **Informations Ã  inclure :**\n   - **Candidat :** Nom: {{ $json.cv.last_name }}, PrÃ©nom: {{ $json.cv.first_name }}, Adresse: {{ $json.cv.city }} {{ $json.cv.country }}, Email: {{ $json.cv.email }}.\n   - **Entreprise :** Nom: {{ $json.job.company }}, Adresse: {{ $json.job.company_details.locations[0].address }}.\n   - **Offre d'emploi :** Titre: {{ $json.job.title }}, Source: {{ $json.job.source }}, Lieu: {{ $json.job.location }}, RÃ©fÃ©rence: {{ $json.job.original_job_id }}.\n   - **Date :** {{ new Date().toLocaleDateString() }}\n\n3. **Contraintes :**\n   - La lettre doit respecter une forme classique.\n   - Ne pas dÃ©passer 10 lignes.\n   - Ne pas inclure d'accroche ou d'introduction.\n   - Utiliser un style sobre et professionnel.\n\n4. **Format de sortie :**\n   - La sortie doit Ãªtre un objet JSON de la forme suivante :\n     ```json\n     {\n       \"header\": \"Texte complet ici\"\n     }\n     ```\n   - La sortie doit Ãªtre exactement cet objet, sans texte explicatif supplÃ©mentaire ni objet englobant.\n\n### Exemple de sortie attendue :\n\n```json\n{\n  \"header\": \"PrÃ©nom Nom\\nAdresse\\nEmail\\n\\nNom de l'entreprise\\nAdresse de l'entreprise\\n\\nDate\\nObjet : Candidature pour le poste de [Titre du poste] (RÃ©fÃ©rence : [RÃ©fÃ©rence de l'offre])\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1040,
        -720
      ],
      "id": "7af144d4-4cf2-4c9d-982d-33b9f0fe314b",
      "name": "AI Agent Header"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1560,
        -860
      ],
      "id": "9c7693b9-5014-4eb8-914e-da8c27e4a5f1",
      "name": "Merge2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=### Objectif :\nRÃ©diger la partie dÃ©montrant lâ€™adÃ©quation technique entre le candidat et le poste.\n\n### Prompt :\n```txt\nTu es un recruteur technique expÃ©rimentÃ©. Aide moi Ã  rÃ©diger le **argumentaire compÃ©tences** ma lettre de motivation pour un poste d'expert en dÃ©veloppement logiciel.\n\n### EntrÃ©es :\n- `candidate`: \"fullname: {{ $json.cv.first_name }} {{ $json.cv.last_name }},titre : {{ $json.cv.title }}, permis de conduire: {{ $json.cv.driving_license ? 'oui' : 'non' }}\"\n- `candidate_experiences`: {{ JSON.stringify($json.cv.experiences) }}\n- `candidate_experiences`: {{ JSON.stringify($json.cv.educations) }}\n- `candidate_skills`: {{ JSON.stringify($json.cv.skills) }}\n- `job_offer`: `{{ $json.job.content }}`\n- `hook`: {{ $json.hook }}\n\n### Contraintes :\n- Met en avant 2 ou 3 points dâ€™adÃ©quation majeurs.\n- Utilise des formulations fluides, sans copier-coller de CV.\n- Garde un ton direct, prÃ©cis, et professionnel.\n- Format : environ 500 caractÃ¨res.\n- Interdication de faire des rÃ©pÃ©tition avec le \"hook\".\n- Interdiction d'Ãªtre vantard. Soit factuel et concentre toi sur les donnÃ©es que tu as uniquement.\n- Sortie attendue :\n```json\n{\n  \"skills_argument\": \"Texte ici\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2480,
        -720
      ],
      "id": "08e51a5a-069e-4af8-abdc-0ad7e1db4ee5",
      "name": "AI Agent Skills"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=### Source :\n{{ $json.job.content }}\n\n### Objectif :\nRÃ©diger un paragraphe d'introduction percutant pour une lettre de motivation, visant Ã  capter l'attention et Ã  contextualiser la candidature de maniÃ¨re professionnelle.\n\n### Instructions :\n\nTu es un expert en communication RH. Aide-moi Ã  rÃ©diger le paragraphe d'introduction de ma lettre de motivation pour un poste d'expert en dÃ©veloppement logiciel. Ce paragraphe doit Ãªtre accrocheur, professionnel et respectueux, en adÃ©quation avec le titre de {{ $json.cv.title }}.\n\n### EntrÃ©es disponibles :\n- **Offre d'emploi :** {{ $json.job.title }}\n- **Candidat :**\n  - Nom complet : {{ $json.cv.first_name }} {{ $json.cv.last_name }}\n  - Titre : {{ $json.cv.title }}\n  - Permis de conduire : {{ $json.cv.driving_license ? 'Oui' : 'Non' }}\n- **ExpÃ©riences du candidat :** {{ JSON.stringify($json.cv.experiences) }}\n- **Ã‰ducation du candidat :** {{ JSON.stringify($json.cv.educations) }}\n- **CompÃ©tences du candidat :** {{ JSON.stringify($json.cv.skills) }}\n- **En-tÃªte :** {{ $json.header }}\n\n### Contraintes :\n- **Style :** Ã‰viter un style scolaire. Adopter un ton professionnel avec une premiÃ¨re phrase impactante.\n- **Structure :** Commencer par une phrase d'introduction professionnelle, par exemple : \"Je me prÃ©sente, {{ $json.cv.first_name }} {{ $json.cv.last_name }}, {{ $json.cv.title }}. Je postule Ã  votre offre d'emploi {{ $json.job.title }} publiÃ©e sur la plateforme {{ $json.job.source.match(/^https?:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1] }}.\"\n- **Contenu :** Mentionner explicitement le poste visÃ© et la plateforme oÃ¹ il a Ã©tÃ© trouvÃ©.\n- **Longueur :** Garder un format court (350 caractÃ¨res maximum) mais supÃ©rieur Ã  100 caractÃ¨res.\n- **OriginalitÃ© :** Ne pas rÃ©pÃ©ter le contenu du CV, mais s'en inspirer pour l'argumentaire.\n- **RÃ©flexion :** Prendre le temps de bien rÃ©flÃ©chir pour produire un texte de qualitÃ©.\n\n### Sortie attendue :\n```json\n{\n  \"hook\": \"Texte ici\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1740,
        -720
      ],
      "id": "f3b196b8-19eb-4379-a8de-62e409b6c1e3",
      "name": "AI Agent Hook"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2280,
        -840
      ],
      "id": "d4ebc296-6c9f-4ebe-965c-d3315aee1a58",
      "name": "Merge3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un agent IA nommÃ© \"motivation\". Tu dois expliquer pourquoi le candidat est sincÃ¨rement intÃ©ressÃ© par lâ€™entreprise et son activitÃ©.\n\nTu peux tâ€™appuyer sur `{{ JSON.stringify($json.job) }}`, son secteur, ses produits, ou sa description.\n\nVoici le cv du postulant: `{{ JSON.stringify($json.cv) }}`\n\nAttention! Les sections suivante ont Ã©tÃ© gÃ©nÃ©rÃ© et tu ne dois pas perdre la cohÃ©rence et ne pas faire doublon Ã  ce qui Ã  dÃ©jÃ  Ã©tÃ© ecrit :\n- \"header\": `{{ $json.header }}`\n- \"hook\": `{{ $json.hook }}`\n- \"skills argument\": `{{ $json.skills_argument }}`\n\nTu dois ecrir \"motivation_letter_section\" en gardant la coÃ©rence avec les autres section, mais tu dois rÃ©diger uniquement \"motivation_letter_section\".\n\n- Sortie attendue :\n```json\n{\n  \"motivation_letter_section\": \"Texte ici\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3160,
        -720
      ],
      "id": "d307709a-7b71-4e04-a4e8-9af73459b817",
      "name": "AI Agent Motivation"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"header\": \"string\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1100,
        -520
      ],
      "id": "c20e8ff1-f451-4691-a336-77bda0af84e8",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if ($json.output) return { json: $json.output };\nreturn { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        -720
      ],
      "id": "5cff4374-53a5-4abf-a2bd-2ad5c530e459",
      "name": "Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"hook\": \"string\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1800,
        -520
      ],
      "id": "663fc74d-8775-493d-bdf1-2e6c66005962",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if ($json.output) return { json: $json.output };\nreturn { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        -720
      ],
      "id": "1858a221-4cd3-4a84-8fcf-0bb7f44d66ea",
      "name": "Output Parser1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if ($json.output) return { json: $json.output };\nreturn { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        -720
      ],
      "id": "126e3fbf-00ae-4f52-89d6-b1c1b70df03f",
      "name": "Output Parser2"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"skills_argument\": \"string\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2540,
        -520
      ],
      "id": "8ac99d37-a56d-40e1-99f8-6bf24a2950f8",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2980,
        -820
      ],
      "id": "c319bca6-38f7-41bc-99f5-96ab6ae5a9af",
      "name": "Merge4"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"motivation_letter_section\": \"string\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3220,
        -520
      ],
      "id": "ecfca175-140a-45bc-ab2e-b66851d6d1d7",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if ($json.output) return { json: $json.output };\nreturn { json: $json };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3480,
        -720
      ],
      "id": "ec1aca43-8584-4396-8c1a-87f1c8013b09",
      "name": "Output Parser3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3660,
        -820
      ],
      "id": "918629f7-02db-4ccb-94bb-a130c185481a",
      "name": "Merge5"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "Input Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Inputs": {
      "main": [
        [
          {
            "node": "MongoDB Job",
            "type": "main",
            "index": 0
          },
          {
            "node": "MongoDB CV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Test": {
      "main": [
        [
          {
            "node": "MongoDB Job",
            "type": "main",
            "index": 0
          },
          {
            "node": "MongoDB CV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Job": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB CV": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent Header",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent Hook",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent Skills",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent Motivation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Prepare Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent Header",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Header": {
      "main": [
        [
          {
            "node": "Output Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "AI Agent Hook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "AI Agent Skills",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Hook": {
      "main": [
        [
          {
            "node": "Output Parser1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Skills": {
      "main": [
        [
          {
            "node": "Output Parser2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Header",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Hook",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Skills",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser2": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "AI Agent Motivation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Motivation",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Motivation": {
      "main": [
        [
          {
            "node": "Output Parser3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser3": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fe8b218e-a487-4178-9557-3a48cabf7826",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "19c6579963f41f7ac923da5748a73a55febeb833fee63b0958a6ffeafde86fda"
  },
  "id": "jjpNmPn4CWPMoEeu",
  "tags": []
}